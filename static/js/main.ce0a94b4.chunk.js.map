{"version":3,"sources":["components/ContactUser.js","components/Contacts.js","firestore.js","components/ChatForm.js","components/ChatMessage.js","components/Chat.js","App.js","serviceWorker.js","index.js"],"names":["ContactUser","id","name","to","className","activeClassName","src","alt","CONTACTS_MOCK","Contacts","map","contact","key","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","ChatForm","initialItemValues","content","useState","item","setItem","chatId","useParams","onKeyDown","event","keyCode","shiftKey","preventDefault","length","createdAt","FieldValue","serverTimestamp","collection","doc","set","sender","then","onChange","target","value","placeholder","ChatMessage","ReactTimeAgo","date","toDate","Chat","match","messages","setMessages","useEffect","unsubscribe","where","params","orderBy","onSnapshot","snapshot","allMessages","forEach","push","data","reverse","message","App","path","exact","component","Boolean","window","location","hostname","JavascriptTimeAgo","locale","en","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ce0a94b4.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nfunction ContactUser({ id, name }) {\n  return (\n    <NavLink to={id} className=\"contact-user\" activeClassName=\"active\">\n      <div className=\"contact-user-foto\">\n        <img src=\"\" alt=\"\" />\n      </div>\n\n      <div className=\"contact-user-info\">\n        <div className=\"contact-user-top\">\n          <span className=\"contact-user-name\">\n            {name}\n          </span>\n        </div>\n      </div>\n    </NavLink>\n  );\n}\n\nexport default ContactUser;","import React from 'react';\n\nimport ContactUser from './ContactUser'\n\nconst CONTACTS_MOCK = [\n  {\n    id: '1',\n    name: 'john_snow'\n  },\n  {\n    id: '2',\n    name: 'martin'\n  },\n  {\n    id: '3',\n    name: 'sherlock'\n  },\n  {\n    id: '4',\n    name: 'monica'\n  },\n  {\n    id: '5',\n    name: 'dallas'\n  }\n];\n\nfunction Contacts() {\n  const renderContacts = () => {\n    return CONTACTS_MOCK.map(contact => (\n      <ContactUser key={contact.id} {...contact} />\n    ))\n  }\n\n  return (\n    <div className=\"contacts-wrap\">\n      <div className=\"contact\">\n        {renderContacts()}\n      </div>\n    </div>\n  );\n}\n\nexport default Contacts;\n","import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst config = {\n  apiKey: \"AIzaSyA50KYAzwYXz_Wt8InNc2E_CDyqYgvbDxc\",\n  authDomain: \"chat-react-app-d65ec.firebaseapp.com\",\n  databaseURL: \"https://chat-react-app-d65ec.firebaseio.com\",\n  projectId: \"chat-react-app-d65ec\",\n  storageBucket: \"chat-react-app-d65ec.appspot.com\",\n  messagingSenderId: \"237513838734\",\n  appId: \"1:237513838734:web:3882d07737a5e16d8639df\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase.firestore();","import React, { useState } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport firebase from 'firebase/app';\nimport firestore from '../firestore';\n\nfunction ChatForm() {\n  const initialItemValues = {\n    content: ''\n  };\n  const [item, setItem] = useState(initialItemValues);\n  const { id: chatId } = useParams();\n\n\n  const handleKeyDown = (event) => {\n    if(event.keyCode === 13 && event.shiftKey === false) {\n      event.preventDefault();\n      if (item.content.length) {\n        let createdAt = firebase.firestore.FieldValue.serverTimestamp();\n        firestore.collection('messages').doc().set({...item, chatId, sender: 'user', createdAt})\n          .then(() => setItem(initialItemValues));\n      }\n    }\n  }\n\n  const handleChange = ({ target }) => {\n    setItem({ content: target.value });\n  }\n\n  return (\n    <div className=\"chat-form\">\n      <form>\n        <div className=\"textarea-wrap\">\n          <textarea onKeyDown={handleKeyDown} onChange={handleChange} value={item.content} name=\"message\" placeholder=\"Text\"></textarea>\n        </div>\n        <div className=\"textarea-count-wrap\">\n          <div className=\"checkbox-wrap\">\n            <label>Press Enter to send</label>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatForm;","import React from 'react';\n\nimport ReactTimeAgo from 'react-time-ago';\n\n\nfunction ChatMessage({content, sender, createdAt}) {\n  return (\n    <div className={sender === 'user' ? \"chat-message user-message\" : \"chat-message\"}>\n      <div className=\"chat-message-foto\">\n        <img src=\"\" alt=\"\"/>\n      </div>\n      <div className=\"chat-message-text\">\n        {content}\n      </div>\n      <div className=\"chat-message-time\">\n        {createdAt ? <ReactTimeAgo date={createdAt.toDate()} /> : '...'}\n      </div>\n    </div>\n  );\n}\n\nexport default ChatMessage;","import React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport firestore from '../firestore';\n\nimport ChatForm from './ChatForm';\nimport ChatMessage from './ChatMessage';\nimport './Chat.css';\n\nfunction Chat({match}) {\n  const [messages, setMessages] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = firestore.collection('messages').where('chatId', '==', match.params.id).orderBy('createdAt', 'desc')\n      .onSnapshot((snapshot) => {\n        const allMessages = [];\n\n        snapshot.forEach((doc) => allMessages.push({id: doc.id, ...doc.data()}));\n\n        setMessages(allMessages);\n      });\n\n    return () => {\n      unsubscribe()\n    };\n  }, [match.params.id]);\n\n  const renderMessages = () => {\n    if (!messages) {\n      return (\n        <div className=\"chat-empty\">\n          <p>Loading...</p>\n        </div>\n      )\n    }\n    if (!messages.length) {\n      return (\n        <div className=\"chat-empty\">\n          <p>There's no messages yet</p>\n        </div>\n      )\n    }\n    \n    return messages.reverse().map((message) => (\n      <ChatMessage key={message.id} {...message} />\n    ))\n  };\n\n  return (\n    <div className=\"chat-block\">\n      <div className=\"chat\">\n        {renderMessages()}\n      </div>\n\n      <ChatForm />\n    </div>\n  );\n}\n\nexport default Chat;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport './App.css';\n\nimport Contacts from './components/Contacts';\nimport Chat from './components/Chat';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"chat-wrap\">\n        <Contacts/>\n\n        <Switch>\n          <Route path=\"/\" exact>\n          <div className=\"chat-block\">\n            <div className=\"chat chat-placeholder\">\n              <p>Chat is not selected</p>\n            </div>\n          </div>\n          </Route>\n          <Route path=\"/:id\" component={Chat} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import \"~bootstrap-reboot\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport JavascriptTimeAgo from 'javascript-time-ago';\nimport en from 'javascript-time-ago/locale/en';\n\nJavascriptTimeAgo.locale(en);\n\nReactDOM.render(\n  <React.StrictMode>\n    <main className=\"main\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-9\">\n            <App />\n          </div>\n\n          <div className=\"col-3\">\n            \n          </div>\n        </div>\n      </div>\n    </main>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}